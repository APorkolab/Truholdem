name: CI + Tools
on:
  push:
    branches: [ "main", "master" ]
  pull_request:
    branches: [ "main", "master" ]
  workflow_dispatch: {}

permissions:
  contents: write
  pull-requests: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # =============== BACKEND: JAVA (MAVEN) ===============
  backend-java:
    name: Backend (Java/Maven)
    runs-on: ubuntu-latest
    defaults: { run: { working-directory: backend } }
    steps:
      - uses: actions/checkout@v4
      - id: detect
        run: |
          if [ -f pom.xml ]; then
            echo "present=true" >> $GITHUB_OUTPUT
            JAVA=17
            if grep -Eq '<maven\.compiler\.release>21</maven\.compiler\.release>|<maven\.compiler\.(source|target)>21</maven\.compiler\.(source|target)>' pom.xml; then
              JAVA=21
            fi
            echo "java=$JAVA" >> $GITHUB_OUTPUT
          else
            echo "present=false" >> $GITHUB_OUTPUT
          fi
      - name: Skip (no Java backend)
        if: steps.detect.outputs.present != 'true'
        run: echo "No backend/pom.xml, skipping Java job."
      - name: Set up JDK
        if: steps.detect.outputs.present == 'true'
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: ${{ steps.detect.outputs.java }}
          cache: maven
      - name: Build (skip tests for stability)
        if: steps.detect.outputs.present == 'true'
        run: mvn -B -q -DskipTests -DskipITs -Dmaven.test.skip=true clean package || mvn -B -q -DskipTests clean package

  # =============== BACKEND: NODE / EXPRESS ===============
  backend-node:
    name: Backend (Node/Express)
    runs-on: ubuntu-latest
    defaults: { run: { working-directory: backend } }
    steps:
      - uses: actions/checkout@v4
      - id: detect
        run: |
          if [ -f package.json ] && [ ! -f pom.xml ]; then
            echo "present=true" >> $GITHUB_OUTPUT
          else
            echo "present=false" >> $GITHUB_OUTPUT
          fi
      - name: Skip (no Node backend)
        if: steps.detect.outputs.present != 'true'
        run: echo "No Node backend (or Java present), skipping."
      - uses: actions/setup-node@v4
        if: steps.detect.outputs.present == 'true'
        with:
          node-version: 20
          cache: npm
          cache-dependency-path: backend/package-lock.json
      - name: Install
        if: steps.detect.outputs.present == 'true'
        run: npm ci || npm ci --legacy-peer-deps
      - name: Lint (best-effort)
        if: steps.detect.outputs.present == 'true'
        run: npm run lint --if-present || echo "No lint or failed — continuing."
      - name: Build (best-effort)
        if: steps.detect.outputs.present == 'true'
        run: npm run build --if-present || echo "No build script — continuing."
      - name: Test (best-effort)
        if: steps.detect.outputs.present == 'true'
        run: npm test --if-present || echo "No tests or failed — continuing."

  # =============== FRONTEND: ANGULAR ===============
  frontend-angular:
    name: Frontend (Angular / generic)
    runs-on: ubuntu-latest
    defaults: { run: { working-directory: frontend } }
    steps:
      - uses: actions/checkout@v4

      # Van-e egyáltalán frontend és Angular?
      - id: detect
        run: |
          if [ ! -f package.json ]; then
            echo "present=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          echo "present=true" >> $GITHUB_OUTPUT
          HAS_NG=$(node -p "p=require('./package.json');(p.dependencies&&p.dependencies['@angular/core'])||(p.devDependencies&&p.devDependencies['@angular/core'])? 'true':'false'")
          echo "has_ng=$HAS_NG" >> $GITHUB_OUTPUT

          # verziók csak akkor, ha Angular van
          if [ "$HAS_NG" = "true" ]; then
            CORE_VER=$(node -p "p=require('./package.json');(p.dependencies?.['@angular/core']||p.devDependencies?.['@angular/core']||'')")
            BUILD_VER=$(node -p "p=require('./package.json');(p.devDependencies?.['@angular-devkit/build-angular']||p.devDependencies?.['@angular/build']||'')")
            CORE_MAJ=$(echo "$CORE_VER" | sed -E 's/[^0-9]*([0-9]+).*/\1/'); [ -z "$CORE_MAJ" ] && CORE_MAJ=0
            BUILD_MAJ=$(echo "$BUILD_VER" | sed -E 's/[^0-9]*([0-9]+).*/\1/'); [ -z "$BUILD_MAJ" ] && BUILD_MAJ=0
            NEED_UPGRADE=false
            if [ "$CORE_MAJ" -lt 20 ] || [ "$BUILD_MAJ" -ge 20 ]; then NEED_UPGRADE=true; fi
            echo "core_major=$CORE_MAJ" >> $GITHUB_OUTPUT
            echo "build_major=$BUILD_MAJ" >> $GITHUB_OUTPUT
            echo "need_upgrade=$NEED_UPGRADE" >> $GITHUB_OUTPUT
          else
            echo "core_major=0" >> $GITHUB_OUTPUT
            echo "build_major=0" >> $GITHUB_OUTPUT
            echo "need_upgrade=false" >> $GITHUB_OUTPUT
          fi

      - name: Skip (no frontend)
        if: steps.detect.outputs.present != 'true'
        run: echo "No frontend/package.json, skipping."

      - uses: actions/setup-node@v4
        if: steps.detect.outputs.present == 'true'
        with:
          node-version: 20
          cache: npm
          cache-dependency-path: frontend/package-lock.json

      # Angular autoupgrade CSAK akkor, ha tényleg Angular
      - name: Auto-upgrade Angular to v20
        if: steps.detect.outputs.present == 'true' && steps.detect.outputs.has_ng == 'true' && steps.detect.outputs.need_upgrade == 'true'
        run: |
          echo "Upgrading Angular to v20 (core/cli/build-angular)…"
          npx -y @angular/cli@20 update @angular/core@20 @angular/cli@20 --force --allow-dirty
          npm i -D @angular-devkit/build-angular@^20 || true
          npm i -D @angular/build@^20 || true
          rm -f package-lock.json
          npm ci

      - name: Install deps
        if: steps.detect.outputs.present == 'true'
        run: npm ci || npm ci --legacy-peer-deps

      # Build: ha Angular, ng build; különben generikus npm run build (ha van)
      - name: Build
        if: steps.detect.outputs.present == 'true'
        run: |
          if [ "${{ steps.detect.outputs.has_ng }}" = "true" ] && [ -f angular.json ]; then
            # ha a script már tartalmaz --configuration=..., akkor ne adjuk hozzá még egyszer
            if node -e "p=require('./package.json');process.exit((p.scripts&&p.scripts.build||'').includes('--configuration=')?0:1)"; then
              npm run build
            else
              npm run build -- --configuration=production
            fi
          else
            npm run build --if-present || echo "Generic frontend build script not found — skipping."
          fi

      - name: Optional tests (best-effort)
        if: steps.detect.outputs.present == 'true'
        run: npm test --if-present || echo "No tests — continuing."

  # =============== MANUAL TOOL: ANGULAR 20 UPGRADE PR ===============
  upgrade-angular20:
    name: Tool – Upgrade Angular to v20 (PR)
    if: ${{ github.event_name == 'workflow_dispatch' }}
    runs-on: ubuntu-latest
    defaults: { run: { working-directory: frontend } }
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }
      - uses: actions/setup-node@v4
        with:
          node-version: 20
      - name: Upgrade to Angular v20
        run: |
          npx -y @angular/cli@20 update @angular/core@20 @angular/cli@20 --force --allow-dirty
          npm i -D @angular-devkit/build-angular@^20
          rm -f package-loc
